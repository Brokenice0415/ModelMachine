// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/21/2019 08:33:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CPUlap
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CPUlap_vlg_sample_tst(
	CLK,
	Data_In,
	sampler_tx
);
input  CLK;
input [7:0] Data_In;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Data_In)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CPUlap_vlg_check_tst (
	Areg,
	Breg,
	Creg,
	Data_Out,
	Order,
	SM,
	sampler_rx
);
input [7:0] Areg;
input [7:0] Breg;
input [7:0] Creg;
input [7:0] Data_Out;
input [7:0] Order;
input  SM;
input sampler_rx;

reg [7:0] Areg_expected;
reg [7:0] Breg_expected;
reg [7:0] Creg_expected;
reg [7:0] Data_Out_expected;
reg [7:0] Order_expected;
reg  SM_expected;

reg [7:0] Areg_prev;
reg [7:0] Breg_prev;
reg [7:0] Creg_prev;
reg [7:0] Data_Out_prev;
reg [7:0] Order_prev;
reg  SM_prev;

reg [7:0] Areg_expected_prev;
reg [7:0] Breg_expected_prev;
reg [7:0] Creg_expected_prev;
reg [7:0] Data_Out_expected_prev;
reg [7:0] Order_expected_prev;
reg  SM_expected_prev;

reg [7:0] last_Areg_exp;
reg [7:0] last_Breg_exp;
reg [7:0] last_Creg_exp;
reg [7:0] last_Data_Out_exp;
reg [7:0] last_Order_exp;
reg  last_SM_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	Areg_prev = Areg;
	Breg_prev = Breg;
	Creg_prev = Creg;
	Data_Out_prev = Data_Out;
	Order_prev = Order;
	SM_prev = SM;
end

// update expected /o prevs

always @(trigger)
begin
	Areg_expected_prev = Areg_expected;
	Breg_expected_prev = Breg_expected;
	Creg_expected_prev = Creg_expected;
	Data_Out_expected_prev = Data_Out_expected;
	Order_expected_prev = Order_expected;
	SM_expected_prev = SM_expected;
end



// expected SM
initial
begin
	SM_expected = 1'bX;
end 
// expected Order[ 7 ]
initial
begin
	Order_expected[7] = 1'bX;
end 
// expected Order[ 6 ]
initial
begin
	Order_expected[6] = 1'bX;
end 
// expected Order[ 5 ]
initial
begin
	Order_expected[5] = 1'bX;
end 
// expected Order[ 4 ]
initial
begin
	Order_expected[4] = 1'bX;
end 
// expected Order[ 3 ]
initial
begin
	Order_expected[3] = 1'bX;
end 
// expected Order[ 2 ]
initial
begin
	Order_expected[2] = 1'bX;
end 
// expected Order[ 1 ]
initial
begin
	Order_expected[1] = 1'bX;
end 
// expected Order[ 0 ]
initial
begin
	Order_expected[0] = 1'bX;
end 
// expected Areg[ 7 ]
initial
begin
	Areg_expected[7] = 1'bX;
end 
// expected Areg[ 6 ]
initial
begin
	Areg_expected[6] = 1'bX;
end 
// expected Areg[ 5 ]
initial
begin
	Areg_expected[5] = 1'bX;
end 
// expected Areg[ 4 ]
initial
begin
	Areg_expected[4] = 1'bX;
end 
// expected Areg[ 3 ]
initial
begin
	Areg_expected[3] = 1'bX;
end 
// expected Areg[ 2 ]
initial
begin
	Areg_expected[2] = 1'bX;
end 
// expected Areg[ 1 ]
initial
begin
	Areg_expected[1] = 1'bX;
end 
// expected Areg[ 0 ]
initial
begin
	Areg_expected[0] = 1'bX;
end 
// expected Breg[ 7 ]
initial
begin
	Breg_expected[7] = 1'bX;
end 
// expected Breg[ 6 ]
initial
begin
	Breg_expected[6] = 1'bX;
end 
// expected Breg[ 5 ]
initial
begin
	Breg_expected[5] = 1'bX;
end 
// expected Breg[ 4 ]
initial
begin
	Breg_expected[4] = 1'bX;
end 
// expected Breg[ 3 ]
initial
begin
	Breg_expected[3] = 1'bX;
end 
// expected Breg[ 2 ]
initial
begin
	Breg_expected[2] = 1'bX;
end 
// expected Breg[ 1 ]
initial
begin
	Breg_expected[1] = 1'bX;
end 
// expected Breg[ 0 ]
initial
begin
	Breg_expected[0] = 1'bX;
end 
// expected Creg[ 7 ]
initial
begin
	Creg_expected[7] = 1'bX;
end 
// expected Creg[ 6 ]
initial
begin
	Creg_expected[6] = 1'bX;
end 
// expected Creg[ 5 ]
initial
begin
	Creg_expected[5] = 1'bX;
end 
// expected Creg[ 4 ]
initial
begin
	Creg_expected[4] = 1'bX;
end 
// expected Creg[ 3 ]
initial
begin
	Creg_expected[3] = 1'bX;
end 
// expected Creg[ 2 ]
initial
begin
	Creg_expected[2] = 1'bX;
end 
// expected Creg[ 1 ]
initial
begin
	Creg_expected[1] = 1'bX;
end 
// expected Creg[ 0 ]
initial
begin
	Creg_expected[0] = 1'bX;
end 
// expected Data_Out[ 7 ]
initial
begin
	Data_Out_expected[7] = 1'bX;
end 
// expected Data_Out[ 6 ]
initial
begin
	Data_Out_expected[6] = 1'bX;
end 
// expected Data_Out[ 5 ]
initial
begin
	Data_Out_expected[5] = 1'bX;
end 
// expected Data_Out[ 4 ]
initial
begin
	Data_Out_expected[4] = 1'bX;
end 
// expected Data_Out[ 3 ]
initial
begin
	Data_Out_expected[3] = 1'bX;
end 
// expected Data_Out[ 2 ]
initial
begin
	Data_Out_expected[2] = 1'bX;
end 
// expected Data_Out[ 1 ]
initial
begin
	Data_Out_expected[1] = 1'bX;
end 
// expected Data_Out[ 0 ]
initial
begin
	Data_Out_expected[0] = 1'bX;
end 
// generate trigger
always @(Areg_expected or Areg or Breg_expected or Breg or Creg_expected or Creg or Data_Out_expected or Data_Out or Order_expected or Order or SM_expected or SM)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Areg = %b | expected Breg = %b | expected Creg = %b | expected Data_Out = %b | expected Order = %b | expected SM = %b | ",Areg_expected_prev,Breg_expected_prev,Creg_expected_prev,Data_Out_expected_prev,Order_expected_prev,SM_expected_prev);
	$display("| real Areg = %b | real Breg = %b | real Creg = %b | real Data_Out = %b | real Order = %b | real SM = %b | ",Areg_prev,Breg_prev,Creg_prev,Data_Out_prev,Order_prev,SM_prev);
`endif
	if (
		( Areg_expected_prev[0] !== 1'bx ) && ( Areg_prev[0] !== Areg_expected_prev[0] )
		&& ((Areg_expected_prev[0] !== last_Areg_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[0] = Areg_expected_prev[0];
	end
	if (
		( Areg_expected_prev[1] !== 1'bx ) && ( Areg_prev[1] !== Areg_expected_prev[1] )
		&& ((Areg_expected_prev[1] !== last_Areg_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[1] = Areg_expected_prev[1];
	end
	if (
		( Areg_expected_prev[2] !== 1'bx ) && ( Areg_prev[2] !== Areg_expected_prev[2] )
		&& ((Areg_expected_prev[2] !== last_Areg_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[2] = Areg_expected_prev[2];
	end
	if (
		( Areg_expected_prev[3] !== 1'bx ) && ( Areg_prev[3] !== Areg_expected_prev[3] )
		&& ((Areg_expected_prev[3] !== last_Areg_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[3] = Areg_expected_prev[3];
	end
	if (
		( Areg_expected_prev[4] !== 1'bx ) && ( Areg_prev[4] !== Areg_expected_prev[4] )
		&& ((Areg_expected_prev[4] !== last_Areg_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[4] = Areg_expected_prev[4];
	end
	if (
		( Areg_expected_prev[5] !== 1'bx ) && ( Areg_prev[5] !== Areg_expected_prev[5] )
		&& ((Areg_expected_prev[5] !== last_Areg_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[5] = Areg_expected_prev[5];
	end
	if (
		( Areg_expected_prev[6] !== 1'bx ) && ( Areg_prev[6] !== Areg_expected_prev[6] )
		&& ((Areg_expected_prev[6] !== last_Areg_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[6] = Areg_expected_prev[6];
	end
	if (
		( Areg_expected_prev[7] !== 1'bx ) && ( Areg_prev[7] !== Areg_expected_prev[7] )
		&& ((Areg_expected_prev[7] !== last_Areg_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Areg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Areg_expected_prev);
		$display ("     Real value = %b", Areg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Areg_exp[7] = Areg_expected_prev[7];
	end
	if (
		( Breg_expected_prev[0] !== 1'bx ) && ( Breg_prev[0] !== Breg_expected_prev[0] )
		&& ((Breg_expected_prev[0] !== last_Breg_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[0] = Breg_expected_prev[0];
	end
	if (
		( Breg_expected_prev[1] !== 1'bx ) && ( Breg_prev[1] !== Breg_expected_prev[1] )
		&& ((Breg_expected_prev[1] !== last_Breg_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[1] = Breg_expected_prev[1];
	end
	if (
		( Breg_expected_prev[2] !== 1'bx ) && ( Breg_prev[2] !== Breg_expected_prev[2] )
		&& ((Breg_expected_prev[2] !== last_Breg_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[2] = Breg_expected_prev[2];
	end
	if (
		( Breg_expected_prev[3] !== 1'bx ) && ( Breg_prev[3] !== Breg_expected_prev[3] )
		&& ((Breg_expected_prev[3] !== last_Breg_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[3] = Breg_expected_prev[3];
	end
	if (
		( Breg_expected_prev[4] !== 1'bx ) && ( Breg_prev[4] !== Breg_expected_prev[4] )
		&& ((Breg_expected_prev[4] !== last_Breg_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[4] = Breg_expected_prev[4];
	end
	if (
		( Breg_expected_prev[5] !== 1'bx ) && ( Breg_prev[5] !== Breg_expected_prev[5] )
		&& ((Breg_expected_prev[5] !== last_Breg_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[5] = Breg_expected_prev[5];
	end
	if (
		( Breg_expected_prev[6] !== 1'bx ) && ( Breg_prev[6] !== Breg_expected_prev[6] )
		&& ((Breg_expected_prev[6] !== last_Breg_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[6] = Breg_expected_prev[6];
	end
	if (
		( Breg_expected_prev[7] !== 1'bx ) && ( Breg_prev[7] !== Breg_expected_prev[7] )
		&& ((Breg_expected_prev[7] !== last_Breg_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Breg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Breg_expected_prev);
		$display ("     Real value = %b", Breg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Breg_exp[7] = Breg_expected_prev[7];
	end
	if (
		( Creg_expected_prev[0] !== 1'bx ) && ( Creg_prev[0] !== Creg_expected_prev[0] )
		&& ((Creg_expected_prev[0] !== last_Creg_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[0] = Creg_expected_prev[0];
	end
	if (
		( Creg_expected_prev[1] !== 1'bx ) && ( Creg_prev[1] !== Creg_expected_prev[1] )
		&& ((Creg_expected_prev[1] !== last_Creg_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[1] = Creg_expected_prev[1];
	end
	if (
		( Creg_expected_prev[2] !== 1'bx ) && ( Creg_prev[2] !== Creg_expected_prev[2] )
		&& ((Creg_expected_prev[2] !== last_Creg_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[2] = Creg_expected_prev[2];
	end
	if (
		( Creg_expected_prev[3] !== 1'bx ) && ( Creg_prev[3] !== Creg_expected_prev[3] )
		&& ((Creg_expected_prev[3] !== last_Creg_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[3] = Creg_expected_prev[3];
	end
	if (
		( Creg_expected_prev[4] !== 1'bx ) && ( Creg_prev[4] !== Creg_expected_prev[4] )
		&& ((Creg_expected_prev[4] !== last_Creg_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[4] = Creg_expected_prev[4];
	end
	if (
		( Creg_expected_prev[5] !== 1'bx ) && ( Creg_prev[5] !== Creg_expected_prev[5] )
		&& ((Creg_expected_prev[5] !== last_Creg_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[5] = Creg_expected_prev[5];
	end
	if (
		( Creg_expected_prev[6] !== 1'bx ) && ( Creg_prev[6] !== Creg_expected_prev[6] )
		&& ((Creg_expected_prev[6] !== last_Creg_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[6] = Creg_expected_prev[6];
	end
	if (
		( Creg_expected_prev[7] !== 1'bx ) && ( Creg_prev[7] !== Creg_expected_prev[7] )
		&& ((Creg_expected_prev[7] !== last_Creg_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Creg[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Creg_expected_prev);
		$display ("     Real value = %b", Creg_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Creg_exp[7] = Creg_expected_prev[7];
	end
	if (
		( Data_Out_expected_prev[0] !== 1'bx ) && ( Data_Out_prev[0] !== Data_Out_expected_prev[0] )
		&& ((Data_Out_expected_prev[0] !== last_Data_Out_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[0] = Data_Out_expected_prev[0];
	end
	if (
		( Data_Out_expected_prev[1] !== 1'bx ) && ( Data_Out_prev[1] !== Data_Out_expected_prev[1] )
		&& ((Data_Out_expected_prev[1] !== last_Data_Out_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[1] = Data_Out_expected_prev[1];
	end
	if (
		( Data_Out_expected_prev[2] !== 1'bx ) && ( Data_Out_prev[2] !== Data_Out_expected_prev[2] )
		&& ((Data_Out_expected_prev[2] !== last_Data_Out_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[2] = Data_Out_expected_prev[2];
	end
	if (
		( Data_Out_expected_prev[3] !== 1'bx ) && ( Data_Out_prev[3] !== Data_Out_expected_prev[3] )
		&& ((Data_Out_expected_prev[3] !== last_Data_Out_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[3] = Data_Out_expected_prev[3];
	end
	if (
		( Data_Out_expected_prev[4] !== 1'bx ) && ( Data_Out_prev[4] !== Data_Out_expected_prev[4] )
		&& ((Data_Out_expected_prev[4] !== last_Data_Out_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[4] = Data_Out_expected_prev[4];
	end
	if (
		( Data_Out_expected_prev[5] !== 1'bx ) && ( Data_Out_prev[5] !== Data_Out_expected_prev[5] )
		&& ((Data_Out_expected_prev[5] !== last_Data_Out_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[5] = Data_Out_expected_prev[5];
	end
	if (
		( Data_Out_expected_prev[6] !== 1'bx ) && ( Data_Out_prev[6] !== Data_Out_expected_prev[6] )
		&& ((Data_Out_expected_prev[6] !== last_Data_Out_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[6] = Data_Out_expected_prev[6];
	end
	if (
		( Data_Out_expected_prev[7] !== 1'bx ) && ( Data_Out_prev[7] !== Data_Out_expected_prev[7] )
		&& ((Data_Out_expected_prev[7] !== last_Data_Out_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data_Out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_Out_expected_prev);
		$display ("     Real value = %b", Data_Out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Data_Out_exp[7] = Data_Out_expected_prev[7];
	end
	if (
		( Order_expected_prev[0] !== 1'bx ) && ( Order_prev[0] !== Order_expected_prev[0] )
		&& ((Order_expected_prev[0] !== last_Order_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[0] = Order_expected_prev[0];
	end
	if (
		( Order_expected_prev[1] !== 1'bx ) && ( Order_prev[1] !== Order_expected_prev[1] )
		&& ((Order_expected_prev[1] !== last_Order_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[1] = Order_expected_prev[1];
	end
	if (
		( Order_expected_prev[2] !== 1'bx ) && ( Order_prev[2] !== Order_expected_prev[2] )
		&& ((Order_expected_prev[2] !== last_Order_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[2] = Order_expected_prev[2];
	end
	if (
		( Order_expected_prev[3] !== 1'bx ) && ( Order_prev[3] !== Order_expected_prev[3] )
		&& ((Order_expected_prev[3] !== last_Order_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[3] = Order_expected_prev[3];
	end
	if (
		( Order_expected_prev[4] !== 1'bx ) && ( Order_prev[4] !== Order_expected_prev[4] )
		&& ((Order_expected_prev[4] !== last_Order_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[4] = Order_expected_prev[4];
	end
	if (
		( Order_expected_prev[5] !== 1'bx ) && ( Order_prev[5] !== Order_expected_prev[5] )
		&& ((Order_expected_prev[5] !== last_Order_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[5] = Order_expected_prev[5];
	end
	if (
		( Order_expected_prev[6] !== 1'bx ) && ( Order_prev[6] !== Order_expected_prev[6] )
		&& ((Order_expected_prev[6] !== last_Order_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[6] = Order_expected_prev[6];
	end
	if (
		( Order_expected_prev[7] !== 1'bx ) && ( Order_prev[7] !== Order_expected_prev[7] )
		&& ((Order_expected_prev[7] !== last_Order_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Order[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Order_expected_prev);
		$display ("     Real value = %b", Order_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Order_exp[7] = Order_expected_prev[7];
	end
	if (
		( SM_expected_prev !== 1'bx ) && ( SM_prev !== SM_expected_prev )
		&& ((SM_expected_prev !== last_SM_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SM :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SM_expected_prev);
		$display ("     Real value = %b", SM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SM_exp = SM_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#4000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CPUlap_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] Data_In;
// wires                                               
wire [7:0] Areg;
wire [7:0] Breg;
wire [7:0] Creg;
wire [7:0] Data_Out;
wire [7:0] Order;
wire SM;

wire sampler;                             

// assign statements (if any)                          
CPUlap i1 (
// port map - connection between master ports and signals/registers   
	.Areg(Areg),
	.Breg(Breg),
	.CLK(CLK),
	.Creg(Creg),
	.Data_In(Data_In),
	.Data_Out(Data_Out),
	.Order(Order),
	.SM(SM)
);

// CLK
initial
begin
	CLK = 1'b1;
	# 10000;
	repeat(199)
	begin
		CLK = 1'b0;
		CLK = #10000 1'b1;
		# 10000;
	end
	CLK = 1'b0;
end 
// Data_In[ 7 ]
initial
begin
	Data_In[7] = 1'b1;
end 
// Data_In[ 6 ]
initial
begin
	Data_In[6] = 1'b1;
end 
// Data_In[ 5 ]
initial
begin
	Data_In[5] = 1'b0;
end 
// Data_In[ 4 ]
initial
begin
	Data_In[4] = 1'b0;
end 
// Data_In[ 3 ]
initial
begin
	Data_In[3] = 1'b0;
end 
// Data_In[ 2 ]
initial
begin
	Data_In[2] = 1'b1;
end 
// Data_In[ 1 ]
initial
begin
	Data_In[1] = 1'b1;
end 
// Data_In[ 0 ]
initial
begin
	Data_In[0] = 1'b1;
end 

CPUlap_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Data_In(Data_In),
	.sampler_tx(sampler)
);

CPUlap_vlg_check_tst tb_out(
	.Areg(Areg),
	.Breg(Breg),
	.Creg(Creg),
	.Data_Out(Data_Out),
	.Order(Order),
	.SM(SM),
	.sampler_rx(sampler)
);
endmodule

