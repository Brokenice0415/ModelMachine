// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/19/2019 13:58:25"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    SHFlap
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SHFlap_vlg_sample_tst(
	A,
	FBUS,
	FL,
	FR,
	sampler_tx
);
input [7:0] A;
input  FBUS;
input  FL;
input  FR;
output sampler_tx;

reg sample;
time current_time;
always @(A or FBUS or FL or FR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module SHFlap_vlg_check_tst (
	CF,
	W,
	sampler_rx
);
input  CF;
input [7:0] W;
input sampler_rx;

reg  CF_expected;
reg [7:0] W_expected;

reg  CF_prev;
reg [7:0] W_prev;

reg  CF_expected_prev;
reg [7:0] W_expected_prev;

reg  last_CF_exp;
reg [7:0] last_W_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	CF_prev = CF;
	W_prev = W;
end

// update expected /o prevs

always @(trigger)
begin
	CF_expected_prev = CF_expected;
	W_expected_prev = W_expected;
end



// expected CF
initial
begin
	CF_expected = 1'bX;
end 
// expected W[ 7 ]
initial
begin
	W_expected[7] = 1'bX;
end 
// expected W[ 6 ]
initial
begin
	W_expected[6] = 1'bX;
end 
// expected W[ 5 ]
initial
begin
	W_expected[5] = 1'bX;
end 
// expected W[ 4 ]
initial
begin
	W_expected[4] = 1'bX;
end 
// expected W[ 3 ]
initial
begin
	W_expected[3] = 1'bX;
end 
// expected W[ 2 ]
initial
begin
	W_expected[2] = 1'bX;
end 
// expected W[ 1 ]
initial
begin
	W_expected[1] = 1'bX;
end 
// expected W[ 0 ]
initial
begin
	W_expected[0] = 1'bX;
end 
// generate trigger
always @(CF_expected or CF or W_expected or W)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CF = %b | expected W = %b | ",CF_expected_prev,W_expected_prev);
	$display("| real CF = %b | real W = %b | ",CF_prev,W_prev);
`endif
	if (
		( CF_expected_prev !== 1'bx ) && ( CF_prev !== CF_expected_prev )
		&& ((CF_expected_prev !== last_CF_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CF :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CF_expected_prev);
		$display ("     Real value = %b", CF_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CF_exp = CF_expected_prev;
	end
	if (
		( W_expected_prev[0] !== 1'bx ) && ( W_prev[0] !== W_expected_prev[0] )
		&& ((W_expected_prev[0] !== last_W_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[0] = W_expected_prev[0];
	end
	if (
		( W_expected_prev[1] !== 1'bx ) && ( W_prev[1] !== W_expected_prev[1] )
		&& ((W_expected_prev[1] !== last_W_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[1] = W_expected_prev[1];
	end
	if (
		( W_expected_prev[2] !== 1'bx ) && ( W_prev[2] !== W_expected_prev[2] )
		&& ((W_expected_prev[2] !== last_W_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[2] = W_expected_prev[2];
	end
	if (
		( W_expected_prev[3] !== 1'bx ) && ( W_prev[3] !== W_expected_prev[3] )
		&& ((W_expected_prev[3] !== last_W_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[3] = W_expected_prev[3];
	end
	if (
		( W_expected_prev[4] !== 1'bx ) && ( W_prev[4] !== W_expected_prev[4] )
		&& ((W_expected_prev[4] !== last_W_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[4] = W_expected_prev[4];
	end
	if (
		( W_expected_prev[5] !== 1'bx ) && ( W_prev[5] !== W_expected_prev[5] )
		&& ((W_expected_prev[5] !== last_W_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[5] = W_expected_prev[5];
	end
	if (
		( W_expected_prev[6] !== 1'bx ) && ( W_prev[6] !== W_expected_prev[6] )
		&& ((W_expected_prev[6] !== last_W_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[6] = W_expected_prev[6];
	end
	if (
		( W_expected_prev[7] !== 1'bx ) && ( W_prev[7] !== W_expected_prev[7] )
		&& ((W_expected_prev[7] !== last_W_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port W[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", W_expected_prev);
		$display ("     Real value = %b", W_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_W_exp[7] = W_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module SHFlap_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] A;
reg FBUS;
reg FL;
reg FR;
// wires                                               
wire CF;
wire [7:0] W;

wire sampler;                             

// assign statements (if any)                          
SHFlap i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.CF(CF),
	.FBUS(FBUS),
	.FL(FL),
	.FR(FR),
	.W(W)
);
// A[ 7 ]
always
begin
	A[7] = 1'b0;
	A[7] = #6000 1'b1;
	#2000;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b1;
	# 1000;
	repeat(124)
	begin
		A[6] = 1'b0;
		A[6] = #6000 1'b1;
		# 2000;
	end
	A[6] = 1'b0;
	A[6] = #6000 1'b1;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b1;
	# 2000;
	repeat(124)
	begin
		A[5] = 1'b0;
		A[5] = #6000 1'b1;
		# 2000;
	end
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
	A[4] = #1000 1'b1;
	# 2000;
	repeat(124)
	begin
		A[4] = 1'b0;
		A[4] = #6000 1'b1;
		# 2000;
	end
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #2000 1'b1;
	# 2000;
	repeat(124)
	begin
		A[3] = 1'b0;
		A[3] = #6000 1'b1;
		# 2000;
	end
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #3000 1'b1;
	# 2000;
	repeat(124)
	begin
		A[2] = 1'b0;
		A[2] = #6000 1'b1;
		# 2000;
	end
	A[2] = 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #4000 1'b1;
	# 2000;
	repeat(124)
	begin
		A[1] = 1'b0;
		A[1] = #6000 1'b1;
		# 2000;
	end
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #5000 1'b1;
	# 2000;
	repeat(124)
	begin
		A[0] = 1'b0;
		A[0] = #6000 1'b1;
		# 2000;
	end
	A[0] = 1'b0;
end 

// FBUS
initial
begin
	FBUS = 1'b1;
	# 50000;
	repeat(9)
	begin
		FBUS = 1'b0;
		FBUS = #50000 1'b1;
		# 50000;
	end
	FBUS = 1'b0;
end 

// FL
initial
begin
	FL = 1'b0;
	FL = #25000 1'b1;
	# 25000;
	repeat(9)
	begin
		FL = 1'b0;
		FL = #75000 1'b1;
		# 25000;
	end
	FL = 1'b0;
end 

// FR
initial
begin
	FR = 1'b1;
	# 25000;
	repeat(9)
	begin
		FR = 1'b0;
		FR = #75000 1'b1;
		# 25000;
	end
	FR = 1'b0;
end 

SHFlap_vlg_sample_tst tb_sample (
	.A(A),
	.FBUS(FBUS),
	.FL(FL),
	.FR(FR),
	.sampler_tx(sampler)
);

SHFlap_vlg_check_tst tb_out(
	.CF(CF),
	.W(W),
	.sampler_rx(sampler)
);
endmodule

